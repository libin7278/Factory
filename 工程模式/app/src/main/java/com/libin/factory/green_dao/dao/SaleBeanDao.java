package com.libin.factory.green_dao.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.libin.factory.green_dao.bean.SaleBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALE_BEAN".
*/
public class SaleBeanDao extends AbstractDao<SaleBean, Long> {

    public static final String TABLENAME = "SALE_BEAN";

    /**
     * Properties of entity SaleBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property S_id = new Property(1, Long.class, "s_id", false, "S_ID");
        public final static Property SName = new Property(2, String.class, "SName", false, "SNAME");
    }

    private Query<SaleBean> shopBean_SaleBeenQuery;

    public SaleBeanDao(DaoConfig config) {
        super(config);
    }
    
    public SaleBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"S_ID\" INTEGER," + // 1: s_id
                "\"SNAME\" TEXT);"); // 2: SName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SaleBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindLong(2, s_id);
        }
 
        String SName = entity.getSName();
        if (SName != null) {
            stmt.bindString(3, SName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SaleBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long s_id = entity.getS_id();
        if (s_id != null) {
            stmt.bindLong(2, s_id);
        }
 
        String SName = entity.getSName();
        if (SName != null) {
            stmt.bindString(3, SName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SaleBean readEntity(Cursor cursor, int offset) {
        SaleBean entity = new SaleBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // s_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // SName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SaleBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setS_id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setSName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SaleBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SaleBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SaleBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "saleBeen" to-many relationship of ShopBean. */
    public List<SaleBean> _queryShopBean_SaleBeen(Long s_id) {
        synchronized (this) {
            if (shopBean_SaleBeenQuery == null) {
                QueryBuilder<SaleBean> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.S_id.eq(null));
                shopBean_SaleBeenQuery = queryBuilder.build();
            }
        }
        Query<SaleBean> query = shopBean_SaleBeenQuery.forCurrentThread();
        query.setParameter(0, s_id);
        return query.list();
    }

}
